---
title: "HW2"
author: "OmerFarukYahsi"
format: pdf
editor: visual
---

## **17.4 Time spans**

We'll learn about how arithmetic with dates works, including subtraction, addition, and division. Along the way, you'll learn about two important classes that represent time spans:

-   **Durations**, which represent an exact number of seconds.

    -   **Precision:** Durations provide precise measurements of time in seconds.

    -   **Use Case:** Suitable for scenarios where the exact time difference between two points in time needs to be calculated, such as in financial calculations (e.g., loan duration).

    -   **Representation:** Represents an exact number of seconds and is not affected by variations in the number of days in months or years.

-   **Periods**, which represent human units like weeks and months.

    -   **Granularity:** Periods are more human-centric, providing a way to represent time in terms of weeks, months, and years.

    -   **Use Case:** Suitable for scenarios where the focus is on calendar units and variations in the number of days (e.g., project planning).

    -   **Representation:** Represents a length of time in terms of human-readable units, accommodating differences in the number of days in months and years.

How do you pick between duration, periods ? As always, pick the simplest data structure that solves your problem. If you only care about physical time, use a duration; if you need to add human times, use a period.

This chapter will focus on the **lubridate** package, which makes it easier to work with dates and times in R. As of the latest tidyverse release, lubridate is part of core tidyverse. We will also need nycflights13 for practice data.

```{r}
library(tidyverse)
library(nycflights13)
library(lubridate) #for older tidyverse versions
```

### **17.4.1 Durations**

In R, when you subtract two dates, you get a difftime object:

```{r}
# How old is Hadley?
h_age <- today() - ymd("1979-10-14")

h_age
```

A `difftime` class object records a time span of seconds, minutes, hours, days, or weeks. This ambiguity can make difftimes a little painful to work with, so lubridate provides an alternative which always uses seconds: the **duration**.

```{r}
as.duration(h_age)
```

Durations come with a bunch of convenient constructors:

```{r}

dseconds(15)

dminutes(10)

dhours(c(12, 24))

ddays(0:5)

dweeks(3)

dyears(1)
```

Durations always record the time span in seconds. Larger units are created by converting minutes, hours, days, weeks, and years to seconds: 60 seconds in a minute, 60 minutes in an hour, 24 hours in a day, and 7 days in a week. Larger time units are more problematic. A year uses the "average" number of days in a year, i.e. 365.25. There's no way to convert a month to a duration, because there's just too much variation.

You can add and multiply durations:

```{r}

2 * dyears(1)

dyears(1) + dweeks(12) + dhours(15)
```

You can add and subtract durations to and from days:

```{r}

tomorrow <- today() + ddays(1)

tomorrow

last_year <- today() - dyears(1)

last_year
```

However, because durations represent an exact number of seconds, sometimes you might get an unexpected result:

```{r}

one_am <- ymd_hms("2026-03-08 01:00:00", tz = "America/New_York")

one_am

one_am + ddays(1)
```

Why is one day after 1am March 8, 2am March 9? If you look carefully at the date you might also notice that the time zones have changed. March 8 only has 23 hours because it's when DST starts, so if we add a full days worth of seconds we end up with a different time.

### **17.4.2 Periods**

To solve this problem, lubridate provides **periods**. Periods are time spans but don't have a fixed length in seconds, instead they work with "human" times, like days and months. That allows them to work in a more intuitive way:

```{r}

one_am

one_am + days(1)
```

Like durations, periods can be created with a number of friendly constructor functions.

```{r}

hours(c(12, 24))

days(7)

months(1:6)
```

You can add and multiply periods:

```{r}

10 * (months(6) + days(1))

days(50) + hours(25) + minutes(2)
```

And of course, add them to dates. Compared to durations, periods are more likely to do what you expect:

```{r}

# A leap year
ymd("2024-01-01") + dyears(1)

ymd("2024-01-01") + years(1)


# Daylight saving time
one_am + ddays(1)

one_am + days(1)
```

The times are represented in a slightly odd format, so we use modulus arithmetic to pull out the hour and minute components. Once we've created the date-time variables, we focus in on the variables we'll explore in the rest of the chapter.

```{r}

make_datetime_100 <- function(year, month, day, time) {
  make_datetime(year, month, day, time %/% 100, time %% 100)
}

flights_dt <- flights |> 
  filter(!is.na(dep_time), !is.na(arr_time)) |> 
  mutate(
    dep_time = make_datetime_100(year, month, day, dep_time),
    arr_time = make_datetime_100(year, month, day, arr_time),
    sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
    sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)
  ) |> 
  select(origin, dest, ends_with("delay"), ends_with("time"))

flights_dt
```

Let's use periods to fix an oddity related to our flight dates. Some planes appear to have arrived at their destination *before* they departed from New York City.

```{r}
flights_dt |> 
  filter(arr_time < dep_time)

```

Lets show some of these physically impossible flights times:

```{r}

filtered_flights <- flights_dt |> 
  filter(arr_time < dep_time)

filtered_flights_inital <- select(filtered_flights, arr_time, dep_time)

filtered_flights_inital
```

These are overnight flights. We used the same date information for both the departure and the arrival times, but these flights arrived on the following day. We can fix this by adding `days(1)` to the arrival time of each overnight flight.

```{r}

flights_dt <- flights_dt |> 
  mutate(
    overnight = arr_time < dep_time,
    arr_time = arr_time + days(overnight),
    sched_arr_time = sched_arr_time + days(overnight)
  )
```

Now all of our flights obey the laws of physics.

```{r}

flights_dt |> 
  filter(arr_time < dep_time) 
```

```{r}
filtered_flights_corrected <- select(flights_dt, arr_time, dep_time)

filtered_flights_corrected
```

## Additional exercises

*Calculating Elapsed Time between Two Specific Dates:*

```{r}

start_date <- ymd("1994-12-21")  

end_date <- ymd("2023-11-21")  

elapsed_time <- end_date - start_date 

elapsed_time #difftime class obejct

cat("Elapsed time:", as.duration(elapsed_time), "\n")
```

To enhance clarity in the output, we can represent the elapsed period in terms of days.

```{r}

# Convert difftime to period 

elapsed_period <- as.period(elapsed_time)  

# Extracting components of the period 

days <- day(elapsed_period)  

cat("Elapsed time:", days, "days\n")
```

*Adding and subtracting months from a date:*

```{r}

future_date <- ymd("2023-05-17")  

future_date_plus_3_months <- future_date + months(3)  

future_date_plus_3_months  

future_date_minus_2_months <- future_date - months(2) 

future_date_minus_2_months
```

*Extracting Components of a Date and Formatting a Date:*

```{r}

sample_date <- ymd_hms("2023-03-15 12:30:45") 

formatted_date <- format(sample_date, "%A, %B %d, %Y %I:%M %p")  

formatted_date
```

**`%A`**: Represents the full weekday name (e.g., "Sunday", "Monday").

**`%B`**: Represents the full month name (e.g., "January", "February").

**`%d`**: Represents the day of the month as a zero-padded decimal number (01, 02, \..., 31).

**`%Y`**: Represents the year with century as a decimal number.

**`%I`**: Represents the hour (01, 02, \..., 12) using the 12-hour clock.

**`%M`**: Represents the minute as a zero-padded decimal number (00, 01, \..., 59).

**`%p`**: Represents either "AM" or "PM" in uppercase.

Lubridate supports weekly periods. Here, we create a sequence of weekly periods for the next three weeks. Adding weekly periods to vector of days:

```{r}

date_vector <- c(today(), today() + days(5), today() - weeks(2))

three_weeks = weeks(3)

future_dates <- date_vector + three_weeks

future_dates
```

Filtering dates based on a period condition :

```{r}

date_vector <- c(today(), today() + days(5), today() - weeks(2))

filtered_dates <- date_vector[date_vector + days(3) < today()]

filtered_dates
```

If the **`period`** object explicitly specifies only the number of weeks (**`weeks = 2`**). When you print the **`my_period`** object, it represents 14 days, but it doesn't include any information about years, months, hours, minutes, or seconds because those components were not specified.

In Lubridate, when you create a **`period`** object and only specify one or more components (e.g., weeks), the other components are assumed to be zero. In following case, we only specified weeks, so the result shows 14 days and zeros for other components.

```{r}
# Create a period of 2 weeks
my_period <- period(weeks = 2)

# Display the period
print(my_period)

# Access components of the period
cat("Years:", year(my_period), "\n")
cat("Months:", month(my_period), "\n")
cat("Days:", day(my_period), "\n")
cat("Hours:", hour(my_period), "\n")
cat("Minutes:", minute(my_period), "\n")
cat("Seconds:", second(my_period), "\n")

```

To create a period with more components, you need to specify them explicitly. For example:

```{r}
# Create a period of 2 weeks, 3 days, 4 hours, 30 minutes, and 15 seconds
my_period <- period(weeks = 2, days = 3, hours = 4, minutes = 30, seconds = 15)

# Display the period
print(my_period)

# Access components of the period
cat("Years:", year(my_period), "\n")
cat("Months:", month(my_period), "\n")
cat("Days:", day(my_period), "\n")
cat("Hours:", hour(my_period), "\n")
cat("Minutes:", minute(my_period), "\n")
cat("Seconds:", second(my_period), "\n")

```

This will create a **`period`** object that includes the specified values for weeks, days, hours, minutes, and seconds.
